<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git笔记</title>
      <link href="/2022/03/22/gitbiji/"/>
      <url>/2022/03/22/gitbiji/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Git是一个免费的开源的分布式版本控制系统。"><a href="#1-Git是一个免费的开源的分布式版本控制系统。" class="headerlink" title="1.Git是一个免费的开源的分布式版本控制系统。"></a>1.Git是一个免费的开源的分布式版本控制系统。</h3><p>Git官网：git-scm.com</p><p>版本控制的核心思想：记录文件修改历史</p><h3 id="2-GIt的工作机制"><a href="#2-GIt的工作机制" class="headerlink" title="2.GIt的工作机制"></a>2.GIt的工作机制</h3><p>分为三个部分<br>工作区git add -&gt; 暂存区 git commit-&gt; 本地库<br>写代码                 临时存储                     历史版本</p><h3 id="3-Git常用命令"><a href="#3-Git常用命令" class="headerlink" title="3.Git常用命令"></a>3.Git常用命令</h3><p>命令名称                                                          作用<br>git config –global user.name 用户名        设置用户签名<br>git config –global user.email 邮箱            设置用户签名<br>git init                                                         初始化本地库<br>git statua                                                    查看本地库状态<br>git add 文件名                                            添加到暂存区<br>git rm –cached 文件名                               将暂存区的文件删掉<br>git commit -m “日志信息” 文件名              添加到本地库<br>git reflog                                                     查看历史版本<br>git log                                                         查看详细的版本信息<br>git reset –hard 版本号                                版本穿梭</p><h3 id="4-Git分支操作"><a href="#4-Git分支操作" class="headerlink" title="4.Git分支操作"></a>4.Git分支操作</h3><p><strong>什么是分支：</strong>在版本控制中，同时推进多个任务，为每个任务，我们可以单独创建一个分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，在开发自己分支的时候，不会影响主线分支的运行。分支的底层是指针的作用。</p><p><strong>分支的操作：</strong><br>命令名称                                                          作用<br>git branch 分支名                                     创建分支<br>git branch -v                                             查看分支<br>git checkout 分支名                                  切换分支<br>git merge 分支                                          把指定的分支合并到当前分支上</p><p><strong>分支合并产生冲突：</strong><br>原因：合并分支时，两个分支在同一个文件的同一个位置有两套不同的修改。Git无法决定使用哪一个。必须认为决定新代码内容。</p><h3 id="5-Git团队协助机制"><a href="#5-Git团队协助机制" class="headerlink" title="5.Git团队协助机制"></a>5.Git团队协助机制</h3><p>团队内协作<br>push            clone           pull<br>跨团队协作<br>fork         clone       push        Pull request        merge         </p><h3 id="6-GitHub操作"><a href="#6-GitHub操作" class="headerlink" title="6.GitHub操作"></a>6.GitHub操作</h3><p><strong>1-.创建远程库</strong><br>远程库的名称最好和本地库的名称相同<br><strong>2-.创建远程仓库别名</strong><br>git remote -v 查看当前所有远程地址别名<br>git remote add 别名 远程地址<br><strong>3-.推送本地库到远程库</strong><br>git push 别名 分支<br>第一次登录会处理一个登陆凭证的东西：可以使用浏览器绑定或者使用token绑定。<br><strong>4-.克隆代码到本地库</strong><br>克隆会自动进行三个操作：1.拉取代码 2.初始化本地库 3.创建别名<br><strong>5-.邀请加入团队</strong><br>Setting -&gt; Manage access<br><strong>6-.SSH免密登录</strong><br>本地生成SSH密钥：ssh –keygen -t rsa  -C “描述”<br>私钥：id_rsa<br>公钥：id_rsa.pub</p><p>公钥填入GitHub：Settings-&gt;SSH and GPG keys-&gt;添加公钥</p><h3 id="7-IDEA集成Git"><a href="#7-IDEA集成Git" class="headerlink" title="7.IDEA集成Git"></a>7.IDEA集成Git</h3><h4 id="1-初始化配置"><a href="#1-初始化配置" class="headerlink" title="1.初始化配置"></a>1.初始化配置</h4><h5 id="1-配置Git忽略文件"><a href="#1-配置Git忽略文件" class="headerlink" title="1.配置Git忽略文件"></a>1.配置Git忽略文件</h5><p>创建忽略规则文件 xxxx.ignore(前缀随便起，建议git.ignore)<br>这个文件的存放位置哪里都行，但是便于让~&#x2F;.gitconfig文件引用，建议也放在用户家目录下<br>git.ignore文件模板内容如下：</p><pre class="line-numbers language-none"><code class="language-none"># Compiled class file*.class# Log file*.log# BlueJ files*.ctxt# Mobile Tools for Java (J2ME).mtj.tmp&#x2F;# Package Files #*.jar*.war*.nar*.ear*.zip*.tar.gz*.rarhs_err_pid*.classpath.project.settingstarget.idea*.iml       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在用户的家目录下配置.gitconfig</p><pre class="line-numbers language-none"><code class="language-none">[core]      excludesfile &#x3D; C:&#x2F;Users&#x2F;HUAN&#x2F;git.ingore<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-定位git程序"><a href="#2-定位git程序" class="headerlink" title="2.定位git程序"></a>2.定位git程序</h5><p>File-&gt;Settings-&gt;VersionControl-&gt;Git</p><h4 id="2-IDEA的git库操作"><a href="#2-IDEA的git库操作" class="headerlink" title="2.IDEA的git库操作"></a>2.IDEA的git库操作</h4><h4 id="1-初始化git库"><a href="#1-初始化git库" class="headerlink" title="1.初始化git库"></a>1.初始化git库</h4><p>   VCS-&gt; Create Git Repository</p><h4 id="2-添加到暂存区"><a href="#2-添加到暂存区" class="headerlink" title="2.添加到暂存区"></a>2.添加到暂存区</h4><p>第一种方法：在要添加的文件处右键-&gt;Git-&gt;Add(快捷键Ctrl + Alt +A)<br>第二种方法：右键项目的根目录右键-&gt;Git-&gt;Add</p><h4 id="3-提交到本地库"><a href="#3-提交到本地库" class="headerlink" title="3.提交到本地库"></a>3.提交到本地库</h4><p>右键项目的根目录右键-&gt;Git-&gt;Commit Directory…</p><h4 id="4-切换版本"><a href="#4-切换版本" class="headerlink" title="4.切换版本"></a>4.切换版本</h4><p>查看版本信息：左下角git -&gt;log<br>切换版本：在log中选中版本右键-&gt;Checkout Revision …</p><h4 id="5-创建分支"><a href="#5-创建分支" class="headerlink" title="5.创建分支"></a>5.创建分支</h4><p>右键项目名称-&gt;Git-&gt;Repository-&gt;Branches…-&gt;New branch<br>                           或者<br>                   单击右下角Git:master-&gt;New branch</p><h4 id="6-切换分支"><a href="#6-切换分支" class="headerlink" title="6.切换分支"></a>6.切换分支</h4><p>单击右下角Git:hot-fix-&gt;点击你要切换的分支-&gt;Checkout</p><h4 id="7-合并分支"><a href="#7-合并分支" class="headerlink" title="7.合并分支"></a>7.合并分支</h4><p>正常合并：切换到主分支-&gt;点击右下角-&gt;选择需要合并的分支-&gt;Merge<br>冲突合并：切换到主分支-&gt;点击右下角-&gt;选择需要合并的分支-&gt;Merge-&gt;解决冲突</p><h3 id="8-IDEA集成Github"><a href="#8-IDEA集成Github" class="headerlink" title="8.IDEA集成Github"></a>8.IDEA集成Github</h3><p>查看是否有GitHub插件<br>File -&gt; Setting -&gt;Version Control-&gt;GitHub<br>如果没有在Settings-&gt;Plugings下搜索下载</p><h4 id="1-设置账号"><a href="#1-设置账号" class="headerlink" title="1.设置账号"></a>1.设置账号</h4><p>使用账号密码登录，由于网络原因难以登录。所以选择使用口令登录。</p><h4 id="2-分享工程到远程库"><a href="#2-分享工程到远程库" class="headerlink" title="2.分享工程到远程库"></a>2.分享工程到远程库</h4><p>VCS-&gt;Import into Version Contral-&gt;Share Project on GitHub</p><h4 id="3-push本地库到远程库"><a href="#3-push本地库到远程库" class="headerlink" title="3.push本地库到远程库"></a>3.push本地库到远程库</h4><p>第一种：右键项目-&gt;Git-&gt;Repository-&gt;Push<br>第二种：VCS-&gt;Git-&gt;Push<br>修改https为ssh：右键别名-&gt;Define Remote-&gt;填入ssh链接</p><h4 id="4-pull拉取远程库到本地库"><a href="#4-pull拉取远程库到本地库" class="headerlink" title="4.pull拉取远程库到本地库"></a>4.pull拉取远程库到本地库</h4><p>push要想成功一定要保证本地库版本比远程库高。因此，在push之前一定要pull一下<br>第一种：右键项目-&gt;Git-&gt;Repository-&gt;Pull<br>第二种：VCS -&gt; Git -&gt; Pull</p><h4 id="5-clone克隆远程库到本地库"><a href="#5-clone克隆远程库到本地库" class="headerlink" title="5.clone克隆远程库到本地库"></a>5.clone克隆远程库到本地库</h4><p>初始化页面-&gt;Get from Version Contral</p><h3 id="9-IDEA集成码云"><a href="#9-IDEA集成码云" class="headerlink" title="9.IDEA集成码云"></a>9.IDEA集成码云</h3><h4 id="1-IDEA安装码云（Gitee）的插件"><a href="#1-IDEA安装码云（Gitee）的插件" class="headerlink" title="1.IDEA安装码云（Gitee）的插件"></a>1.IDEA安装码云（Gitee）的插件</h4><p>File -&gt; Settings -&gt; Plugins -&gt; 搜索Gitee-&gt;安装重启</p><h4 id="2-IDEA连接Gitee"><a href="#2-IDEA连接Gitee" class="headerlink" title="2.IDEA连接Gitee"></a>2.IDEA连接Gitee</h4><p>File -&gt; Settings -&gt; Version Contral -&gt;Gitee -&gt;登陆账号 </p><h4 id="3-分享项目到Gitee-相当于新建远程库"><a href="#3-分享项目到Gitee-相当于新建远程库" class="headerlink" title="3.分享项目到Gitee(相当于新建远程库)"></a>3.分享项目到Gitee(相当于新建远程库)</h4><p>VCS -&gt; Import into Version Contral -&gt; Share Project on Gitee</p><h4 id="4-push本地代码到远程库"><a href="#4-push本地代码到远程库" class="headerlink" title="4.push本地代码到远程库"></a>4.push本地代码到远程库</h4><p>第一种：项目文件夹右键-&gt;Git -&gt;Repository -&gt;Push<br>第二种：VCS -&gt; Git -&gt; Push<br>注意：但是第一次会有一个origin的默认链接，需要自己定义自己的连接。</p><h4 id="5-Pull远程库到本地库"><a href="#5-Pull远程库到本地库" class="headerlink" title="5.Pull远程库到本地库"></a>5.Pull远程库到本地库</h4><p>VCS -&gt; Git -&gt; Pull -&gt;选择Gitee的链接-&gt;勾选master的分支</p><h4 id="6-从Github上导入项目到Gitee"><a href="#6-从Github上导入项目到Gitee" class="headerlink" title="6.从Github上导入项目到Gitee"></a>6.从Github上导入项目到Gitee</h4><h3 id="10-GitLab"><a href="#10-GitLab" class="headerlink" title="10.GitLab"></a>10.GitLab</h3><p>简介：GitLab是由GitLabInc开发，使用MIT许可证的基于网络的Git仓库管理工具，且具有wiki和issue追踪功能。使用Git作为代码管理工具，并在此基础上搭建起来的Web服务。</p><p>官网地址：<a href="https://about.gitlab.com/">https://about.gitlab.com/</a><br>安装说明：<a href="https://about.gitlab.com/installation/">https://about.gitlab.com/installation/</a></p><h4 id="1-准备一台服务器"><a href="#1-准备一台服务器" class="headerlink" title="1.准备一台服务器"></a>1.准备一台服务器</h4><p>查看IP地址：ifconfig<br>修改ip地址：vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33   将IPADDR修改<br>修改主机名：vim &#x2F;etc&#x2F;hostsname<br>关闭服务器的网络防火墙<br>重启</p><p>配置windows的host文件的映射：eg:192.168.6.200 gitlab-server<br>配置Xshell链接</p><h4 id="2-准备gitlab-ce安装包（几百MB）"><a href="#2-准备gitlab-ce安装包（几百MB）" class="headerlink" title="2.准备gitlab-ce安装包（几百MB）"></a>2.准备gitlab-ce安装包（几百MB）</h4><p>Yum在线安装gitlab-ce时，需要下载几百MB的安装文件，非常耗时，所以最好提前将所需RPM包下载到本地，使用离线rpm的方式安装。然后将下载的安装包放在服务器的opt&#x2F;module文件夹里</p><h4 id="3-安装gitlab"><a href="#3-安装gitlab" class="headerlink" title="3.安装gitlab"></a>3.安装gitlab</h4><pre class="line-numbers language-none"><code class="language-none">sudo rpm -ivh &#x2F;opt&#x2F;module&#x2F;gitlab...sudo yum install -y curl policycoreutils-python openssh-server croniesudo lokkit -s http -s sshsudo yum install -y postfixsudo service postfix startsudo chkconfig postfix oncurl https:&#x2F;&#x2F;packages.gitlab.com&#x2F;install&#x2F;repositories&#x2F;gitlab&#x2F;gitlab-ce&#x2F;script.rpm.shsudo EXTERNAL_URL&#x3D;&quot;http:&#x2F;&#x2F;gitlab.example.com&quot; yum -y install gitlab-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-初始化GitLab服务"><a href="#4-初始化GitLab服务" class="headerlink" title="4.初始化GitLab服务"></a>4.初始化GitLab服务</h4><p>gitlab-ctl reconfigure</p><h4 id="5-启动GitLab服务"><a href="#5-启动GitLab服务" class="headerlink" title="5.启动GitLab服务"></a>5.启动GitLab服务</h4><p>gitlab-ctl start</p><h4 id="6-登录GitLab创建远程库"><a href="#6-登录GitLab创建远程库" class="headerlink" title="6.登录GitLab创建远程库"></a>6.登录GitLab创建远程库</h4><h4 id="7-IDEA集成GitLab"><a href="#7-IDEA集成GitLab" class="headerlink" title="7.IDEA集成GitLab"></a>7.IDEA集成GitLab</h4><p>与Gitee操作一样</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Hexo博客并且部署到GitHub</title>
      <link href="/2022/03/09/hexo-hithub/"/>
      <url>/2022/03/09/hexo-hithub/</url>
      
        <content type="html"><![CDATA[<h3 id="一，下载Nodejs-git-hexo"><a href="#一，下载Nodejs-git-hexo" class="headerlink" title="一，下载Nodejs,git,hexo"></a>一，下载Nodejs,git,hexo</h3><ol><li><p>Nodejs下载网址：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p>检查是否安装成功：</p></li></ol><pre class="line-numbers language-none"><code class="language-none">node -vnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><p>git下载网址：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a><br>检查是否安装成功：<code>git --version</code></p></li><li><p>hexo下载：<code>npm install hexo-cli -g</code><br>检查是否安装成功：<code>hexo -v</code></p></li></ol><h3 id="二，搭建仓库"><a href="#二，搭建仓库" class="headerlink" title="二，搭建仓库"></a>二，搭建仓库</h3><ol><li><p>github注册账号</p></li><li><p>新建仓库</p><p>​    Repository名称：用户名.github.io</p><p>​    权限：public</p><p>​    勾选：ADD a README file</p></li></ol><h3 id="三，生成ssh密钥并绑定："><a href="#三，生成ssh密钥并绑定：" class="headerlink" title="三，生成ssh密钥并绑定："></a>三，生成ssh密钥并绑定：</h3><ol><li><p>生成ssh密钥：<code>ssh-keygen -t rsa -C &quot;GitHub邮箱地址&quot;</code></p></li><li><p>在用户文件夹下的.ssh文件夹下找到公钥：id_rsa.pub</p></li><li><p>将公钥复制填写到你的GitHub上绑定</p></li><li><p>检测ssh密钥是否绑定成功：ssh -T <a href="mailto:&#103;&#x69;&#116;&#x40;&#x67;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;">&#103;&#x69;&#116;&#x40;&#x67;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;</a></p></li></ol><h3 id="四，搭建本地博客"><a href="#四，搭建本地博客" class="headerlink" title="四，搭建本地博客"></a>四，搭建本地博客</h3><ol><li><p>新建一个文件夹blog</p></li><li><p>在该文件夹里初始化hexo博客： hexo init</p></li><li><p>在本地部署服务器查看 hexo s</p></li></ol><h3 id="五，部署到github"><a href="#五，部署到github" class="headerlink" title="五，部署到github"></a>五，部署到github</h3><ol><li>将根目录下的_config.yml中最后一行修改添加为：</li></ol><pre class="line-numbers language-none"><code class="language-none">deploy: type: gitrepository: 你的仓库地址branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>安装hexo-deployer-git</li></ol><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>生成静态文件</li></ol><pre class="line-numbers language-none"><code class="language-none">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>设置邮箱和用户名</li></ol><pre class="line-numbers language-none"><code class="language-none">git config --global user.email &quot;你的邮箱&quot;git config --global user.name &quot;你的用户名&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>将静态文件上传到GitHub</li></ol><pre class="line-numbers language-none"><code class="language-none">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：第一次上传需要用githun生成token</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
